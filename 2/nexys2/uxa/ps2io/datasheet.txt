PRELIMINARY DATA SHEET

CONCEPT

    The PS/2 adapter provides a mechanism for 16-bit computers to interface
    with PS/2-compatible peripherals.  It provides a 16-byte input FIFO buffer
    for processors lacking interrupts.  Out-going data may be communicated with
    the peripheral through a pair of data and clock driver overrides.

FEATURES

    - 16 bit data bus makes interfacing to word-addressed 16-bit processors
      easy.
    - 16 byte first-in, first-out buffer for data coming from the peripheral.
    - Independent PS/2 data and clock drivers.
    - Designed for processor systems lacking interrupt resources.

MODULE PORTS

    PS2_D_I         PS/2 Data input

    This port represents the quantized state of the PS/2 data signal.  Since
    the data signal is open-collector, a pull-up resistor should be used to
    ensure PS2_D_I always defaults to a known-good state.

    PS2_D_OE        PS/2 Data driver enable output

    This port controls an external pull-down transistor, forcing the PS/2 data
    signal low.

    PS2_C_I         PS/2 Clock input

    This port represents the quantized state of the PS/2 clock signal.  Since
    the clock signal is open-collector, a pull-up resistor should be used to
    ensure PS2_D_I always defaults to a known-good state.

    PS2_C_OE        PS/2 Clock driver enable output

    This port controls an external pull-down transistor, forcing the PS/2 clock
    signal low.

    Typical driver circuitry for the PS/2 data and clock lines would resemble
    the following schematic:

           +Vcc   <>----/\/\----.
                                |
                       +-----+  |
        PS2_x_I   <----| SCL |--*--------------<> X
                       +-----+  |
                                |
                               |/
        PS2_x_OE  >-----/\/\---|   NPN
                               |\
                                |
                               ---
                               ///  (SCL = Signal Conditioning Logic)

    Specific resistor values will depend upon supply voltage of the PS/2
    peripheral you intend on driving and the I/O voltage your programmable
    logic element uses.  Many FPGA development boards will have the pull-up
    logic implemented for you, in which case you'll only need to implement
    the driver logic if you wish output capability.

    IO_D_I[15:0]
    IO_D_O[15:0]   Microprocessor data bus

    The microprocessor interface requires a 16-bit wide data bus.  When the
    microprocessor asserts IO_WE_I, the state of IO_D_O will be undefined, and
    should be ignored, as the PS/2 interface will be accepting data off of
    IO_D_I.  Otherwise, the PS/2 interface will ignore the IO_D_I port, and
    drive data on IO_D_O.

    IO_WE_I        Microprocessor read/write control

    If true, the microprocessor intends on sending data to the PS/2 interface.
    Otherwise, the PS/2 interface will respond with data.

    IO_STB_I       Microprocessor bus cycle control
    IO_ACK_O       Microprocessor bus cycle control

    These two signals comprise a Wishbone compatible handshaking interface.
    When the microprocessor initiates a bus cycle intended for the PS/2
    interface, it will assert IO_STB_I.  When the PS/2 interface has satisfied
    the request from the microprocessor, it must respond by asserting IO_ACK_O.

    IO_CLK_I        Microprocessor bus clock

    The microprocessor's bus clock, used to synchronize all operations inside
    the PS/2 interface as well as bus transactions.


BLOCK DIAGRAM

                    +----------+
    PS2_D_I >--*--->|   SHIFT  |
    PS2_C_I >-*|--->| REGISTER |<---.
              ||    +---+-+----+    |
              ||        | |         |
              ||        \ /         |
              ||    +----v-----+---------+
              ||    |   WRITE  |  FIRST  |
              ||    |   LOGIC  |    IN   |
              ||    +----------+  FIRST  +---------+
              ||               |   OUT   |  READ   |
              ||               |  (x16)  |  LOGIC  |<-----.
              ||               +---------+---+-+---+      |
              ||                    | |      | |          |
              |`--------. .---------' |      | |          |
              `-------. | | .---------'     ----- 8       |
                      | | | |                | |          |
                      V V V V                | |          |
                    +---------+              | |    +---------+
                    |  SENSE  |------|-------+ | .--|   BUS   |
                    |  LOGIC  |------|-------+ | |.-|  LOGIC  |<---.
                    +---------+      4       | | || +---------+    |
                      ^                      | | ||   ^  ^  ^      |
                      |  ,-------------------| |-'|   |  |  |      |
                      |  |                   | |  |   |  |  |      |
                      `--|-------------------| |--'   |  |  |      |
                         V                   | |      |  |  |      |
                    +---------+              | |      |  |  |      |
    PS2_D_OE <------|  DRIVE  |              | |      |  |  |
    PS2_C_OE <------|  LOGIC  |              | |      |  |  |     IO_CLK_I
                    +----^----+              | |      |  |
                        / \                  | |      |  | IO_ACK_O
                        | |                  | |      |
                        | |                   v       | IO_STB_I

                       IO_D_I               IO_D_O  IO_WE_I


REGISTER DEFINITION

    The PS/2 interface consists of one read-only register and one write-only
    register, mapped to the same address.  External address decoding logic
    gates the IO_STB_I signal on behalf of the processor.

    When reading, the processor sees the following fields on the data bus:

      15  14  13  12    11  10   9   8     7   6   5   4   3   2   1   0
    +---+---+---+---+ +---+---+---+---+ +---+---+---+---+---+---+---+---+
    | V | F | 0 | 0 | | 0 | 0 | C | D | |            data byte          |
    +---+---+---+---+ +---+---+---+---+ +---+---+---+---+---+---+---+---+

    When writing, the following bits are valid; all undefined bits are to
    be written as '0' for future compatibility purposes.

      15  14  13  12    11  10   9   8     7   6   5   4   3   2   1   0
    +---+---+---+---+ +---+---+---+---+ +---+---+---+---+---+---+---+---+
    |   |   |   |   | |   |   | C | D | |                               |
    +---+---+---+---+ +---+---+---+---+ +---+---+---+---+---+---+---+---+

    V Bit (read-only).  This bit is 1 when at least one byte remains to be read
    from the interface FIFO.  Otherwise, it will be set to 0.

    F Bit (read-only).  This bit is 1 when the FIFO can take no further
    information (i.e., is "full").  Otherwise, it will be set to 0.

    C Bit (read-only).  This bit represents the current digital state of the
    PS/2 clock line.  0 indicates ground potential, while 1 indicates positive
    supply rail voltage.

    C Bit (write-only).  Setting this bit disables the output driver for the
    clock line, thus letting the line float to its high quiescent voltage.
    Clearing this bit will engage the output driver, dragging the clock line to
    ground state, regardless of what other devices may or may not be driving
    the signal.  Note that PS2_C_OE is always the opposite of the value of this
    bit.

    D Bit (read-only).  This bit represents the current digital state of the
    PS/2 data line.  0 indicates ground potential, while 1 indicates positive
    supply rail voltage.

    D Bit (write-only).  Setting this bit disables the output driver for the
    data line, thus letting the line float to its high quiescent voltage.
    Clearing this bit will engage the output driver, dragging the data line to
    ground state, regardless of what other devices may or may not be driving
    the signal.  Note that PS2_D_OE is always the opposite of the value of this
    bit.

    data byte (read-only).  If the V bit is set, this byte represents the
    current head of the FIFO buffer.  If the V bit is clear, this value remains
    undefined.

FIFO OPERATION

    When a PS/2 peripheral delivers a byte to the host, the byte will appear in
    the FIFO, causing the V bit to be set.  At this time, the host may read the
    next byte from the FIFO.  Reading the FIFO, however, does not pop the byte
    off the queue.  If it did, simply checking to see if the V bit was set
    would be a destructive operation.  Instead, to pop the byte, the host must
    write to the register.

    Note that writing to the register will also affect the current C and D
    bits.  In normal operation, the host will want to write the value $0300 to
    ensure that the clock and data lines are not affected by the host's
    drivers.  However, be aware that should the host need to send a byte to the
    PS/2 peripheral, it must first clear the queue of data first.  Otherwise,
    the repeated writes to the C and D bits will effectively drop all
    unreceived information bytes up to the start of the host-to-peripheral
    transmission.

TYPICAL USAGE

    The following code waits for a byte to appear in the FIFO:

        \ Forth; assume IOKYBD points to the I/O register for the keyboard
        \ interface

        : waitForDataReady      BEGIN IOKYBD @ $8000 AND UNTIL ;

        /* C */

        void waitForDataReady(void) {
            extern unsigned short *IOKYBD;

            do while(!(*IOKYBD & 0x8000));
        }

    The following code grabs the next byte from the FIFO, if one exists.  It'll
    block until a byte arrives.

        \ Forth

        : nextByte      waitForDataReady  IOKYBD @ $FF AND  $0300 IOKYBD ! ;

        /* C */

        UBYTE nextByte(void) {
            extern unsigned short *IOKYBD;

            UBYTE b;
            waitForDataReady();
            b = (UBYTE)(0x00FF & *IOKYBD);
            *IOKYBD = 0x0300;
            return b;
        }

