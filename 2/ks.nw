@ The simulator's top-level code layout follows.</p>

<<ks.c>>=
<<General C Headers>>
<<SDL Headers>>
<<Convenience type definitions>>
<<System Constants>>
<<Kestrel Machine State>>
<<Handy Macros>>
<<Debug report generation>>
<<Keyboard Emulation>>
<<Main procedure>>

@ I include [[stdio.h]] to include file and console I/O facilities.</p>

<<General C Headers>>=
#include <stdio.h>
#include <assert.h>

@ Graphics output by SDL.</p>

<<SDL Headers>>=
#include <SDL/SDL.h>

@ When I first wrote the simulator, I intended on spending no more than 24 hours hacking on it, for the purposes of getting some Kestrel software running while I was away on vacation.  Some data types turned up so frequently that they deserved very short names for them.</p>

<<Convenience type definitions>>=
typedef Uint32                  L;
typedef enum { NO, YES }        B;
typedef SDL_Surface *           S;

@ The simulator works by computing a next state given some current state as an input.  For this reason, many pieces of data have two fields.  Given a field [[X]], referring to some current state for <i>x</i>, field [[_X]] will hold the state for next simulated clock cycle.</p>

<<Kestrel Machine State>>=
typedef struct k_state {
    <<Bus state>>
    <<Processor state>>
    <<Memory state>>
    <<Simulator state>>
    <<Keyboard I/O State>>
} k_state, *K;

@ Emulating a processor on a cycle-by-cycle basis isn't the most efficient thing to do.  However, emulating the J1 requires we do exactly this, because of its horizontally-encoded instructions, and it's relative timing relationships with the Kestrel's synchronous RAM.  Thus, we need to keep its instruction and data buses separate, even though they both refer to the same physical chunk of RAM.</p>

<<Bus state>>=
L       _rst_i, rst_i;
L       i_adr_o, i_dat_i;
L       d_adr_o, d_dat_o, d_dat_i, _d_we_o, d_we_o;

@ The official documentation on the J1 processor specifies the CPU has 32 data and return stack registers comprising its stacks.</p>

<<Processor state>>=
L       ds[32], rs[32];         /* Data and Return stacks */
L       _t, t;                  /* Top of data stack */
L       _nip, nip;              /* Next Instruction Pointer */
L       _dsp, dsp, _rsp, rsp;   /* Data and Return stack pointers */

@ Not part of the actual J1 hardware, the simulator needs some place to store the succeeding state of the second-top-of-stack register.</p>

<<Processor state>>=
L       _n;

@ When an ALU instruction is executed, one bit specifies whether or not the CPU should <q>return</q>; that is, it should place the top of the return stack into the [[nip]] register.  We can't just copy it right away because of some intermediate dependencies, but we can remember that an instruction asked for it for later action.  Frankly, I am not happy with this solution, and I'm somewhat considering re-engineering the [[k_state]] structure and everything it depends on to remove this blemish.  For now, however, things work, and that's what matters most.</p>

<<Processor state>>=
L       _pc_r;

@ The J1 can't do a thing without some kind of memory to store its software in.  The J1 addresses memory by word, not by byte, but does so with byte-compatible addresses.  With a 16-bit data and 15-bit address bus width, it follows that it can address no more than 32768 words of memory.</p>

<<Memory state>>=
L       ram[32768];

@ The simulator opens a window in most environments; the only way to exit the simulator is through closing that window.  The [[SDL_QUIT]] event handler, invoked in response to a user closing the window, needs to record that the user wants to end the session.  I don't like just quitting right away because it would bypass clean-up procedures.</p>

<<Simulator state>>=
B       stop_emulation;

@ To aid in debugging software, the simulator can optionally print a trace of its execution to the console.  This feature is toggled with a special, illegal J1 instruction form.</p>
<<Simulator state>>=
L       dbg;

@ The Kestrel-2 doesn't utilize a lot of I/O resources.  Its keyboard interface appears at address [[$FFFE]] in its memory space, which means word address [[$7FFF]] in the word-addressed world.  At present, no I/O registers exist for controlling the video display; it runs fully autonomously.  However, the bitmap it refreshes the screen with appears at address [[$8000]] to a program ([[$4000]] as a word-address).</p>

<<System Constants>>=
#define VB 0x4000       /* Video base address */
#define KB 0x7FFF       /* Keyboard I/O register */

@ When I set out to write the simulator, I experimented with a very, very terse form of programming I'd first seen in the J Programming Language community.  Overall, I think it works well.  I found I was able to complete large portions of the program quite quickly and with fewer errors.  Choosing macros carefully suited to the problem you're trying to solve really aids in getting things working quickly.  However, as can be seen below, to the uninitiated, it looks like bogus nonsense.  For example, [[L]] is a data type, while [[_L]] is a macro casting some datum to type [[L]].  Just by looking at the code, without any further explanation, the reader would be completely ignorant of this distinction.</p>

<<Handy Macros>>=
<<Debugging macros>>
<<Stack access macros>>
<<Common function declaration macros>>
<<Input validation macros>>
<<Typecasting macros>>
<<Iteration macros>>

@ In an ideal world, [[DB()]] should never appear in production code.  Yet, I defined it because typing [[DB]] saved substantial amounts of time while debugging over [[fprintf(stderr,]].</p>

<<Debugging macros>>=
#define DB(f,args...)           fprintf(stderr, f, ##args);

@ When debugging is turned on, you'll see reports for each instruction executed on the console.</p>

<<Debug report generation>>=
V(dbg) { DB("N:%04X T:%04X DSP:%d R: %04X RSP: %d NIP: %04X IN:%04X RA:%04X RD:%04X %s:%04X\n", N, T, kk->dsp, R, kk->rsp, kk->nip, kk->ram[kk->nip], kk->d_adr_o, kk->d_dat_i, (kk->d_we_o?"wr":"WR"), kk->d_dat_o); }

@ The emulator, since it emulates a stack architecture processor, makes routine access to the top and/or second-top of stacks.  These macros help save valuable typing and opportunities for error.</p>

<<Stack access macros>>=
#define N                       kk->ds[31&(kk->dsp-1)]
#define R                       kk->rs[31&(kk->rsp-1)]
#define T                       kk->t

@ Definitions backing the various behaviors of the simulated processor follow argument patterns that occur over and over again.  I encapsulate these patterns in a set of macros, again reducing typing and chance for errors.</p>

<<Common function declaration macros>>=
#define nV(x)                   L x(K kk)
#define V(x)                    void x (K kk)
#define Vn(x)                   void x (K kk, L n)

@ Sometimes, input parameters are checked for validity; if some condition is true or false, we return to the caller, knowing that no further action need be taken.</p>

<<Input validation macros>>=
#define RT(x)                   if((x))return;
#define RF(x)                   RT(!(x))

@ C lacks a great deal of expressivity when it comes to detailing the types of certain things.  These typecasting macros helps to eliminate errors, again by reducing how much I have to type in a statement, but surprisingly, also cleans up the source code listing by eliminating the typecasting noise that, otherwise, serves no meaningful purpose.</p>

<<Typecasting macros>>=
#define _SL(x)                  ((signed long)((x)))
#define _L(x)                   ((L*)((x)))
#define _UL(x)                  ((unsigned long)((x)))

@ Another pattern that seems to occur frequently in the code, deterministic iteration lets us define system behavior in terms of how many pixels are on the (simulated) VGA display.</p>

<<Iteration macros>>=
#define TIMES(x,y,z)            for(x=0;x<(y);x++){z}

@ When the simulator starts, the first thing we do is invoke the code to display the simulated monitor in the context of an initialized SDL library.</p>

<<Main procedure>>=
<<Definition of [[with_sdl]]>>
<<Definition of [[show_monitor]]>>
int  main(int argc, char *argv[])   { with_sdl(show_monitor); return 0; }

@ Note I mentioned the word <i>context</i>; when I first wrote this software, I had not thought to employ literate programming to support arbitrary procedure ordering.  So, I simulated it by using Lisp-style <q>with</q> functions and passing function pointers.  This let me wrap some subordinate chunk of functionality, not yet written, inside a wrapper which took care of library bring-up and tear-down for me.</p>
<p>I actually enjoy coding this way; I was pleasantly surprised at how nicely expressive some procedures became after adjusting to this technique.</p>

<<Definition of [[with_sdl]]>>=
void with_sdl(void(*f)()) {
    if(SDL_Init(SDL_INIT_VIDEO)) {
        fprintf(stderr, "SDL_Init: %s\n", SDL_GetError());
        exit(1);
    }
    f();
    SDL_Quit();
}

@ Rendering the monitor required creating an SDL surface on which to draw.  This, too, required a wrapper to ensure we didn't leak memory on systems which failed to track process resources.</p>

<<Definition of [[show_monitor]]>>=
<<Definition of [[with_framebuffer]]>>
<<Definition of [[emulate]]>>
void show_monitor(void)             { with_framebuffer(emulate); }

@ Modern monitor and graphics resolutions are so high that opening a 640x200 surface would yield a window which appears too small and distorted.  Hence, we open a 640x400 display instead.  All of my computers support 32 bit per pixel frame buffers as well, so I do not bother with auto-detecting the best technique to stuff video memory.</p>

<<Definition of [[with_framebuffer]]>>=
void with_framebuffer(void(*f)(S)) {
    S fb;

    fb = SDL_SetVideoMode(640, 400, 32, SDL_SWSURFACE);
    if(fb) {
        f(fb);
        SDL_FreeSurface(fb);
    } else {
        fprintf(stderr, "with_framebuffer: %s\n", SDL_GetError());
    }
}

@ The emulation logic takes the following basic form.</p>

<<Definition of [[emulate]]>>=
<<Definition of [[transcribe_line]]>>
<<Definition of [[sample]]>>
<<Definition of [[latch]]>>
<<Definition of [[react]]>>
void emulate(S fb) {
    <<Emulation variables>>
    <<ROM File Ingest>>
    <<Main emulation loop>>
}

@ The emulator needs to know the state of the Kestrel-2 computer as a whole.</p>
<<Emulation variables>>=
k_state kk = {1,1,};

@ Before the processor can actually do anything, it needs something to do it with.  A special file, [[romfile]], contains the processor's initial program to execute.  (Note: although I call it [[romfile]], the contents are not stored in ROM.  At present, the simulator makes no attempt to protect the lower part of memory against writes.)</p>

<<Emulation variables>>=
FILE *romFile;

<<ROM File Ingest>>=
romFile = fopen("romfile", "rb");
if(romFile){
    int i=0,h,l;
    for(;;){
        if(feof(romFile)) break;
        if(i>=8192) break;
        h=fgetc(romFile)&0xFF;  l=fgetc(romFile)&0xFF;
        kk.ram[i++]=l|(h<<8);
    }
    fclose(romFile);
}else{
    perror("main: romfile");
    exit(1);
}

@ The main emulation loop works by simulating the Kestrel-2, cycle by cycle, for each pixel on a VGA display.  Note that although the display shows 640 pixels, enough time passes between HSYNC signals for 784 pixels.  But, because the J1 processor takes two memory cycles to read or write from or to RAM, we loop for 397 iterations per horizontal scanline.  Likewise, although the user only sees 480 pixels in the vertical direction, enough time passes between VSYNC pulses for 525 rows.  After a full screen's worth of pixels have been <q>displayed</q>, we flip the framebuffer, so that the user sees the result in the simulation window.</p>

<<Emulation variables>>=
int h, v;

<<Main emulation loop>>=
memset(fb->pixels, 0, fb->pitch * fb->h);
for(kk.stop_emulation = NO; !kk.stop_emulation;){
    TIMES(v,525,TIMES(h,397,sample(&kk);latch(&kk););transcribe_line(&kk, fb, v);)
    SDL_Flip(fb);
    react(&kk);
}

@ Every scanline, we transcribe memory out of the J1's address space and into the SDL surface.  The Kestrel-2 supports only 200 lines, though, so we skip every other line, giving the display an old-school CRT look.  I thought of doubling the scanlines to fill in the gaps, but so far have not felt compelled to implement scan-doubling yet.</p>
<p>You'll note that we actually render the display starting at VGA scanline 125.  This is where the 400 pixel display would appear vertically centered on a real display.  With J1 memory storing 16-bit words, 640 pixels takes only 40 words on a monochrome display.</p>

<<Definition of [[transcribe_line]]>>=
<<Definition of [[expand]]>>
void transcribe_line(K kk, S fb, int line) {
    L i, l=line-125, *d = _L(fb->pixels+fb->pitch*l), *s = _L(kk->ram+VB+40*(l>>1));
    RT(line<125); RT(line&1);
    TIMES(i,40,expand(&s,&d););
}

@ While the J1 thinks its talking to a monochrome display device, regrettably, SDL refuses to support monochrome software surfaces.  Instead, we need to perform color expansion ourselves.  We cycle through each pixel, starting at bit 15 and working towards bit 0, filling in succeeding 32-bit words of the SDL surface according to what we find in J1 memory.  Note that the resulting color will likely differ depending on the platform you compile this code on.  My Linux machine treats on pixels as white, while my MacBook Pro treats them as yellow.  In either case, I'm not picky; remember when Macintosh classics came with green, amber, or white screens?</p>

<<Definition of [[expand]]>>=
void expand(L **s, L **d) {
    L i,j=**s; (*s)++;
    TIMES(i,16,**d=(((j&0x8000)!=0)*0xFFFFFF); j<<=1; (*d)++;);
}

@ At the end of every VGA frame, we poll SDL for input events.  [[SDL_QUIT]] messages indicate that the user wants to terminate his instance of the emulator.  [[SDL_KEYDOWN]] or [[SDL_KEYUP]] events are treated by the PS/2 keyboard emulation code.</p>

<<Definition of [[react]]>>=
<<Definition of [[keypress]]>>
void react(K kk) {
    SDL_Event e;
    while(SDL_PollEvent(&e)){
        switch(e.type){
            case SDL_QUIT:      kk->stop_emulation=YES; break;
            case SDL_KEYDOWN:   keypress(0, &e, kk); break;
            case SDL_KEYUP:     keypress(1, &e, kk); break;
        }
    }
}

@ As indicated earlier, the simulator works on a cycle by cycle basis.  In hardware, each cycle is broken into two phases.  Generally, the logic spends its time <i>sampling</i> the current state of the hardware, calculating passively the next state to take on.  However, when the clock goes from low to high, the hardware <i>latches</i> the new state on that edge.  (Hence the term <q>edge-triggered logic</q>, if you've ever heard of that term before.)  This emulator, similarly, divides its cycles into sample and latch phases.</p>

<<Definition of [[sample]]>>=
<<Definition of [[cpu_sample]]>>
<<Definition of [[ram_sample]]>>
V(sample) {cpu_sample(kk); ram_sample(kk); }

<<Definition of [[latch]]>>=
<<Definition of [[cpu_latch]]>>
<<Definition of [[ram_latch]]>>
<<Definition of [[tt]]>>
V(latch)  {cpu_latch(kk); ram_latch(kk); tt(kk);}

@ I don't actually know how Xilinx' RAM blocks deal with sampling its inputs, so for now I ignore this phase.  The RAM-related logic in [[ram_latch]] seems to suffice for accurate simulation.  Note that we deal with <i>word addresses</i>, not byte addresses.</p>

<<Definition of [[ram_sample]]>>=
V(ram_sample) {}

<<Definition of [[ram_latch]]>>=
V(ram_latch) {
    <<RAM-to-instruction bus coupling>>
    <<RAM-to-data bus coupling>>
}

@ Instruction fetches occur concurrently with data fetches, if any, on the J1.  Hence, it relies on its own bus.  Moreover, because the Xilinx FPGAs have dual-ported RAMs, we needn't worry about spending time multiplexing between data and instruction fetches.</p>

<<RAM-to-instruction bus coupling>>=
kk->i_dat_i = kk->ram[kk->i_adr_o];

@ You might have noticed that we don't account for I/O devices when dealing with the instruction bus.  In real hardware, you'd expect fetching instructions from I/O would cause it to read from I/O registers.  It would, but the J1 only has a 13-bit instruction pointer, capable of addressing only the first 8 KiW of memory.  As long as I/O is located outside that range, we don't have to account for it, because it'll never fetch from there.</p>
<p>However, we do have to account for I/O when dealing with the data bus.</p>

<<RAM-to-data bus coupling>>=
<<Reading from memory>>
<<Writing to memory>>

<<Reading from memory>>=
switch(kk->d_adr_o){
    <<Reading from Keyboard I/O>>
    default:        kk->d_dat_i=kk->ram[kk->d_adr_o];
}

@ The keyboard interface consists of a single register located at address [[$FFFE]], giving the host CPU access to the keyboard's make/break code queue.  When reading from the register, the results appear in the following fields:</p>
<table width="100%" border="1px">
 <thead>
  <th>15</th> <th>14</th> <th>13</th> <th>12</th> <th>11</th> <th>10</th> <th>09</th> <th>08</th>
  <th>07</th> <th>06</th> <th>05</th> <th>04</th> <th>03</th> <th>02</th> <th>01</th> <th>00</th>
 </thead>
 <tr>
  <td>V</td> <td>F</td> <td colspan="4">&nbsp;</td> <td>C</td> <td>D</td>
  <td colspan="8">MBC</td>
 </tr>
</table>

@ The [[V]] bit is set when <i>at least one</i> make/break code exists in the keyboard's input queue.  It will be clear otherwise.  The [[F]] bit will be set when no further bytes can be accepted into the queue (e.g., the queue is <q>full</q>).  The [[C]] and [[D]] bits allow the host CPU to query the state of the PS/2 clock and data lines, respectively.  They'll be set if their corresponding line has a high voltage, or clear otherwise.  Finally, the [[MBC]] field represents the next byte in the queue, if any.</p>

@ Note that reading from the register doesn't pop the queue; rather, it just returns the value at the head of the queue, assuming [[V]] true.</p>

<<Reading from Keyboard I/O>>=
case KB:    kk->d_dat_i=(kqvalid(kk))<<15|(kqfull(kk))<<14|(kqtop(kk))|0x0300; break;

<<Current Head of Keyboard Queue>>=
nV(kqtop) { return _UL(kk->kqq[kk->kqtail]);}

@ To pop the queue, the programmer needs to write a value into the keyboard register.  The emulator completely ignores this value.  However, two bits are defined for use with hardware implementations of the Kestrel-2.  The written form of the register contains the following fields:</p>

<table width="100%" border="1px">
 <thead>
  <th>15</th> <th>14</th> <th>13</th> <th>12</th> <th>11</th> <th>10</th> <th>09</th> <th>08</th>
  <th>07</th> <th>06</th> <th>05</th> <th>04</th> <th>03</th> <th>02</th> <th>01</th> <th>00</th>
 </thead>
 <tr>
  <td colspan="6">&nbsp;</td> <td>C</td> <td>D</td>
  <td colspan="8">&nbsp;</td>
 </tr>
</table>

@ The [[C]] and [[D]] bits control <i>drivers</i> for the respective PS/2 port signal.  If the corresponding value is written as a [[1]], the driver is disabled, and the PS/2 line is allowed to float high, assuming nobody else is pulling the line low.  Otherwise, a [[0]] value will activate the driver, pulling the corresponding PS/2 port signal low by force.</p>

<<Writing to memory>>=
RF(kk->d_we_o);
switch(kk->d_adr_o){
 case KB: kqpulse(kk); break;
 default:     kk->ram[kk->d_adr_o] = kk->d_dat_o;
}

@ Note: because the emulator ignores the value written to the keyboard register, the [[C]] and [[D]] bits will always be set (e.g., the PS/2 port will always appear idle) when reading from the register.  One could take advantage of this to detect whether they're running under the [[ks]] emulator software.  Don't depend on this, however, for future versions of [[ks]] <i>may</i> emulate the PS/2 port semantics.</p>

@ The keyboard port exposes a few bits of status information.  First, we need to know if data exists at all in the queue.  When the queue is empty, the head and tail pointers will be equal to each other.  So, as long as they differ, we know at least one byte exists.</p>

<<Querying Keyboard for Data Availability>>=
nV(kqvalid) {
    return _UL(kk->kqhead != kk->kqtail);
}

<<Keyboard I/O State>>=
int kqhead, kqtail;

@ Testing to see if the queue is <i>full</i>, however, requires a bit of modulo arithmetic; when the head pointer is immediately behind the tail pointer (e.g., h=t-1, modulo [[KQSIZE]]), we cannot possibly add any more bytes, for doing so violates the invariant that [[kqvalid()]] depends on.</p>

<<Querying Keyboard for Full Queue>>=
nV(kqfull) {
    return _UL(kk->kqhead == ((kk->kqtail-1)&(KQSIZE-1)));
}

@ We also talked about popping the keyboard queue by writing some value into the keyboard I/O port.  Basically, if the queue has at least one byte in it, we simply bump the tail pointer of the queue.</p>

<<Popping the Keyboard Queue>>=
V(kqpulse) {
    if(kqvalid(kk)) {
        kk->kqtail = (kk->kqtail+1)&(KQSIZE-1);
    }
}

@ We used logical ANDs to perform our modular arithmetic, so [[KQSIZE]] must always be a power of two in size.  This actually makes things quite convenient for real-world hardware implementation as well.</p>

<<System Constants>>=
#define KQSIZE      16

@ Periodically, I display the simulated clock frequency on the console.  Every ten million simulated cycles, we look at the wall-clock to see how much time has elapsed, measured in <i>microseconds</i>.  Dividing 10 000 000 by this span of time will yield an estimate of the equivalent processor performance, in <i>megahertz</i>.</p>

<<Definition of [[tt]]>>=
V(tt) {
    static long cycles=0;
    static long n,m;
    static struct timeval tv;

    if(cycles!=10000000){cycles++; return;}
    n=m;
    gettimeofday(&tv,0L);
    m=tv.tv_sec*1000000+tv.tv_usec;
    DB("\rClk: %g MHz   ", ((float)cycles/((m-n)?(m-n):1)));
    cycles=0;
}

@ You might be wondering about the bizarre denominator of the fraction above.  It's intended to prevent any divide-by-zero errors in the unlikely event that both [[n]] and [[m]] equal each other.</p>

@ The J1 microprocessor uses a horizontally-encoded microcode format.  One field of the instruction encodes what the new top of data stack should evaluate to in the next cycle.  It's a 4-bit field, so there exists sixteen different possibilities.</p>

<<T-field choices>>=
nV(aluT) { return T; }
nV(aluN) { return N; }
nV(aluTplN) { return T+N; }
nV(aluTandN) { return T&N; }
nV(aluTorN) { return T|N; }
nV(aluTxorN) { return T^N; }
nV(aluTnot) { return ~T; }
nV(aluNeqT) { return -1*(N==T); }
nV(aluNltT) { return -1*(_SL(N) < _SL(T)); }
nV(aluNrshT) { return N>>T; }
nV(aluTm1) { return T-1; }
nV(aluR) { return R; }
nV(aluFetch) { return kk->d_dat_i; }
nV(aluNlshT) { return N<<T; }
nV(aluDepth) { DB("depth not implemented at address %04X\n", kk->nip); return 0; }
nV(aluNultT) { return -1*(_UL(N)<_UL(T)); }

typedef L ALUOP(K);
ALUOP *aluOp[16] = {aluT, aluN, aluTplN, aluTandN, aluTorN, aluTxorN, aluTnot, aluNeqT, aluNltT, aluNrshT, aluTm1, aluR, aluFetch, aluNlshT, aluDepth, aluNultT};

@ Changes in program flow are encoded uniformly as a 3-bit opcode and a 13-bit value to store into the [[nip]] register.  Three program flow instructions exist:</p>

<<Program flow instructions>>=
<<Definition of [[walk]]>>
Vn(jump) { kk->_nip = n; }
Vn(call) { kk->_pc_r = YES; jump(kk, n); }
Vn(jumpT0) { kk->_dsp = kk->_dsp-1; kk->_t = N; if(kk->t) walk(kk,n); else jump(kk,n); }

@ Most instructions will be either literals or ALU instructions.  Neither literals nor ALU instructions jump anywhere (unless the [[R->PC]] bit is set, effecting a return from subroutine), so these instructions are said to <q>walk</q> instead.</p>

<<Definition of [[walk]]>>=
Vn(walk) { kk->_nip = kk->nip+1; }

@ If the high bit of the instruction is set, the remaining 15 bits are taken as a literal value to be pushed onto the data stack.</p>

<<Literal instruction>>=
Vn(literal) { kk->ds[kk->dsp] = kk->t; kk->_t = n; kk->_dsp = 31&(kk->dsp+1); walk(kk,n); }

@ Unlike most other CPUs which have discrete opcodes for discrete operations, J1 relies on horizontal micro-encoding for its ALU instruction.  It comprises several fields, all of which are documented in the official J1 paper.  Note that the order of operations is vitally important; however, I don't actually know <i>why</i>.</p>

<<ALU instruction>>=
<<T-field choices>>
Vn(alu) {
    walk(kk,n);
    if(n&0x1000) kk->_nip = R;
    kk->_t = aluOp[(n&0x0F00)>>8](kk);
    kk->d_we_o = (n&0x0020) != 0;
    kk->dbg^=n&0x0010;
    if(n&0x0040) kk->rs[kk->_rsp] = kk->t;
    switch((n&0x000C)>>2) {
        case 0: break;
        case 1: kk->_rsp = (kk->rsp+1); break;
        case 2: kk->_rsp = (kk->rsp-2); break;
        case 3: kk->_rsp = (kk->rsp-1); break;
    }
    switch(n&3) {
        case 0: break;
        case 1: kk->_dsp = (kk->dsp+1); break;
        case 2: kk->_dsp = (kk->dsp-2); break;
        case 3: kk->_dsp = (kk->dsp-1); break;
    }
    if(n&0x0080) kk->ds[kk->_dsp-1] = kk->t;
}

@ If you study the stack layouts of the Forth words [[!]] and [[@]], you'll find that the RAM address always appears in [[T]], and if needed, the data to work with appears in [[N]].  Thus, the J1 passively couples [[T]] and [[N]] to the [[D_ADR_O]] and [[D_DAT_O]] pins, respectively.  We simulate this behavior here.  (The name, [[all]], comes from the fact that this behavior applies to all CPU instructions, including illegal forms.)</p>

<<Definition of [[all]]>>=
Vn(all) {
    kk->d_dat_o = N;
    kk->d_adr_o = (T>>1);
}

@ When the CPU samples its state, it takes the value of [[I_DAT_I]], the instruction data bus, into consideration, for it decides what the next CPU state will be.  Five classes of instructions exist.</p>

<<Definition of [[cpu_sample]]>>=
<<Program flow instructions>>
<<Literal instruction>>
<<ALU instruction>>
<<Definition of [[all]]>>
V(cpu_sample) {
    L i15_13 = (kk->i_dat_i & 0xE000)>>13;
    L i12_0 = kk->i_dat_i & 0x1FFF;

    kk->_rst_i = (kk->rst_i)?(kk->rst_i-1):0;
    kk->d_we_o = 0;
    all(kk,i12_0);
    switch(i15_13) {
        case 0:     jump(kk, i12_0); break;
        case 1:     jumpT0(kk, i12_0); break;
        case 2:     call(kk, i12_0); break;
        case 3:     alu(kk, i12_0); break;
        default:    literal(kk, kk->i_dat_i&0x7FFF); break;
    }
    kk->_nip &= 0x1FFF;
}

@ Latching of the state simply propegates the [[_X]] fields to the official [[X]] fields.  If I rewrite the Kestrel-2 emulation logic, I'll write it so that it ping-pongs between two identical copies of the system state, one being the current state, and one serving as the state-to-be.  It'd be simpler, I think.</p>

<<Definition of [[cpu_latch]]>>=
V(cpu_latch) {
    kk->rst_i = kk->_rst_i;

    if(kk->_pc_r) {
        kk->rs[kk->rsp] = kk->nip+1;
        kk->_rsp = kk->rsp+1;
        kk->_pc_r = NO;
    }

    kk->t = 0xFFFF&kk->_t;
    kk->nip = kk->_nip;
    kk->i_adr_o = kk->nip;
    kk->dsp = 31&kk->_dsp;
    kk->rsp = 31&kk->_rsp;

    if(kk->dbg) dbg(kk);
}

@ I wanted to properly emulate a PS/2 keyboard in the simulator.</p>

<<Keyboard Emulation>>=
<<Querying Keyboard for Data Availability>>
<<Querying Keyboard for Full Queue>>
<<Popping the Keyboard Queue>>
<<Queueing an MBC>>
<<Current Head of Keyboard Queue>>

@ To do this, I needed to map SDL's generic keycodes to PS/2-specific values, and enqueue them in a form that the Kestrel software would understand.</p>

<<Definition of [[keypress]]>>=
<<SDL keycode discovery table>>
<<PS/2 keycode lookup table>>
void keypress(int up, SDL_Event *e, K kk) {
    int i,c,ext;

    <<Find index of corresponding SDL scancode>>
    <<Resolve corresponding PS/2 scancode>>
    <<Enqueue make/break codes>>
}

@ There's no convenient rhyme or reason to the PS/2 scancodes that I could find, so I determined that the quickest and easiest way to accomplish the desired mapping is to look up the SDL keycode in a table to yield a unique index into the table.</p>

<<SDL keycode discovery table>>=
static int SDL2kbd[]={
    '`', '1', '2', '3', '4', '5', '6', '7', '8', '9', '0', '-', '=', 0x08,
    0x09, 'q', 'w', 'e', 'r', 't', 'y', 'u', 'i', 'o', 'p', '[', ']', '\\',
    'a', 's', 'd', 'f', 'g', 'h', 'j', 'k', 'l', ';', '\'', 0x0D,
    'z', 'x', 'c', 'v', 'b', 'n', 'm', ',', '.', '/', ' ',

    0x0130, 0x012F,                     /* Left, Right shift */
    0x0132, 0x0131,                     /* Left, Right control */
    0x0134, 0x0133,                     /* Left, Right Alt */
    0x012D,                             /* CAPS Lock */
    0x001B,                             /* ESC */
    0x011A, 0x011B, 0x011C, 0x011D,     /* F1...  */
    0x011E, 0x011F, 0x0120, 0x0121,
    0x0122, 0x0123, 0x0124, 0x0125,     /* ...F12 */
    0x0111, 0x0112, 0x0113, 0x0114,     /* Cursor up, down, right, left */
};

<<Find index of corresponding SDL scancode>>=
for(i=0;i<512;i++){if(SDL2kbd[i]==e->key.keysym.sym)break;}

@ Once we have the desired index, we dereference the [[kbd2PS2]] array to get the equivalent PS/2 scancodes.</p>

<<PS/2 keycode lookup table>>=
static int kbd2PS2[]={
    0x0E, 0x16, 0x1E, 0x26, 0x25, 0x2E, 0x36, 0x3D, 0x3E, 0x46, 0x45, 0x4E, 0x55, 0x66,
    0x0D, 0x15, 0x1D, 0x24, 0x2D, 0x2C, 0x35, 0x3C, 0x43, 0x44, 0x4D, 0x54, 0x5B, 0x5D,
    0x1C, 0x1B, 0x23, 0x2B, 0x34, 0x33, 0x3B, 0x42, 0x4B, 0x4C, 0x52, 0x5A,
    0x12, 0x22, 0x21, 0x2A, 0x32, 0x31, 0x3A, 0x41, 0x49, 0x4A, 0x29,

    0x12, 0x59,                         /* Left, right shift */
    0x14, 0xE014,                       /* Left, right control */
    0x11, 0xE011,                       /* Left, right Alt */
    0x58,                               /* CAPS Lock */
    0x76,                               /* ESC */
    0x05, 0x06, 0x04, 0x0C,             /* F1...  */
    0x03, 0x0B, 0x83, 0x0A,
    0x01, 0x09, 0x78, 0x07,             /* ...F12 */
    0xE075, 0xE072, 0xE074, 0xE06B,     /* Cursor up, down, right, left */
};

<<Resolve corresponding PS/2 scancode>>=
c=kbd2PS2[i];

@ PS/2 scancodes are surprisingly complex.  So-called extended make-codes consist of two bytes, [[$E0]] followed by another byte.  Normal scancodes consist only of the raw bytes.  When a break-code is sent, [[$F0]] is sent before the scancode, <i>unless</i> it is an extended break-code, in which case [[$E0]] comes first, <i>then</i> the [[$F0]], <i>then</i> the remaining scancode byte.  Since we basically have four possibilities as to how to encode the data, I take advantage of C's boolean value equaling [[1]] when true, and [[0]] when false.  The [[ext]] value will evaluate to [[2]] if its predicate proves true, thanks to the multiplication by 2, and [[0]] otherwise.  This lets me sum [[ext]] and [[up]] to yield a value between 0 and 3, inclusive.  [[switch]] handles the resulting decision tree admirably.

<<Enqueue make/break codes>>=
ext=2*((c&0xFF00)==0xE000);
switch(ext+up) {
    case 0:     break;
    case 1:     kqenq(kk, 0xF0); break;
    case 2:     kqenq(kk, 0xE0); break;
    case 3:     kqenq(kk, 0xE0); kqenq(kk, 0xF0); break;
}
kqenq(kk, c);

@ We can't enqueue MBCs if the keyboard queue is full, however.</p>

<<Queueing an MBC>>=
void kqenq(K kk, int c) {if(!kqfull(kk)){kk->kqq[kk->kqhead]=c&0xFF; kk->kqhead=(kk->kqhead+1)&(KQSIZE-1);}}

<<Keyboard I/O State>>=
unsigned char kqq[KQSIZE];
@

